// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RequestTimeOff.Specflow.Features.Models.Requests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RequestsTimeOffForADateRangeFeature : object, Xunit.IClassFixture<RequestsTimeOffForADateRangeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TimeOffDateRange.feature"
#line hidden
        
        public RequestsTimeOffForADateRangeFeature(RequestsTimeOffForADateRangeFeature.FixtureData fixtureData, RequestTimeOff_Specflow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Models/Requests", "Requests TimeOff for a Date Range", "Calculate a range of dates to request off for.  This is done by putting in a star" +
                    "t date and passing number of days to ask off to be greater than 1.\r\nThis will ca" +
                    "lculate that many days off.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a request for one day off")]
        [Xunit.TraitAttribute("FeatureTitle", "Requests TimeOff for a Date Range")]
        [Xunit.TraitAttribute("Description", "Create a request for one day off")]
        [Xunit.TraitAttribute("Category", "TimeOff")]
        public void CreateARequestForOneDayOff()
        {
            string[] tagsOfScenario = new string[] {
                    "TimeOff"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a request for one day off", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("A user wants to request 1 day(s) off on \"2023/01/03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When("Calculating days off", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table1.AddRow(new string[] {
                            "2023/01/03"});
#line 10
 testRunner.Then("The following records are created", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a request for multiple days off")]
        [Xunit.TraitAttribute("FeatureTitle", "Requests TimeOff for a Date Range")]
        [Xunit.TraitAttribute("Description", "Create a request for multiple days off")]
        [Xunit.TraitAttribute("Category", "TimeOff")]
        public void CreateARequestForMultipleDaysOff()
        {
            string[] tagsOfScenario = new string[] {
                    "TimeOff"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a request for multiple days off", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given("A user wants to request 3 day(s) off on \"2023/01/03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When("Calculating days off", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table2.AddRow(new string[] {
                            "2023/01/03"});
                table2.AddRow(new string[] {
                            "2023/01/04"});
                table2.AddRow(new string[] {
                            "2023/01/05"});
#line 18
 testRunner.Then("The following records are created", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a request for multiple days off that span a weekend")]
        [Xunit.TraitAttribute("FeatureTitle", "Requests TimeOff for a Date Range")]
        [Xunit.TraitAttribute("Description", "Create a request for multiple days off that span a weekend")]
        [Xunit.TraitAttribute("Category", "TimeOff")]
        public void CreateARequestForMultipleDaysOffThatSpanAWeekend()
        {
            string[] tagsOfScenario = new string[] {
                    "TimeOff"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a request for multiple days off that span a weekend", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("A user wants to request 5 day(s) off on \"2023/01/03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.When("Calculating days off", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table3.AddRow(new string[] {
                            "2023/01/03"});
                table3.AddRow(new string[] {
                            "2023/01/04"});
                table3.AddRow(new string[] {
                            "2023/01/05"});
                table3.AddRow(new string[] {
                            "2023/01/06"});
                table3.AddRow(new string[] {
                            "2023/01/09"});
#line 28
 testRunner.Then("The following records are created", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a request for multiple days off that span a holiday")]
        [Xunit.TraitAttribute("FeatureTitle", "Requests TimeOff for a Date Range")]
        [Xunit.TraitAttribute("Description", "Create a request for multiple days off that span a holiday")]
        [Xunit.TraitAttribute("Category", "TimeOff")]
        public void CreateARequestForMultipleDaysOffThatSpanAHoliday()
        {
            string[] tagsOfScenario = new string[] {
                    "TimeOff"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a request for multiple days off that span a holiday", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("A user wants to request 5 day(s) off on \"2023/07/03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table4.AddRow(new string[] {
                            "2023/07/04"});
#line 39
 testRunner.And("The following holidays exist", ((string)(null)), table4, "And ");
#line hidden
#line 42
 testRunner.When("Calculating days off", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table5.AddRow(new string[] {
                            "2023/07/03"});
                table5.AddRow(new string[] {
                            "2023/07/05"});
                table5.AddRow(new string[] {
                            "2023/07/06"});
                table5.AddRow(new string[] {
                            "2023/07/07"});
                table5.AddRow(new string[] {
                            "2023/07/10"});
#line 43
 testRunner.Then("The following records are created", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a request for multiple days off that span multiple holidays")]
        [Xunit.TraitAttribute("FeatureTitle", "Requests TimeOff for a Date Range")]
        [Xunit.TraitAttribute("Description", "Create a request for multiple days off that span multiple holidays")]
        public void CreateARequestForMultipleDaysOffThatSpanMultipleHolidays()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a request for multiple days off that span multiple holidays", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("A user wants to request 2 day(s) off on \"2023/11/22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table6.AddRow(new string[] {
                            "2023/11/23"});
                table6.AddRow(new string[] {
                            "2023/11/24"});
#line 55
 testRunner.And("The following holidays exist", ((string)(null)), table6, "And ");
#line hidden
#line 59
 testRunner.When("Calculating days off", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date"});
                table7.AddRow(new string[] {
                            "2023/11/22"});
                table7.AddRow(new string[] {
                            "2023/11/27"});
#line 60
 testRunner.Then("The following records are created", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RequestsTimeOffForADateRangeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RequestsTimeOffForADateRangeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
